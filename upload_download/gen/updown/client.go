// Code generated by goa v3.0.10, DO NOT EDIT.
//
// updown client
//
// Command:
// $ goa gen goa.design/examples/upload_download/design

package updown

import (
	"context"
	"io"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "updown" service client.
type Client struct {
	UploadEndpoint   goa.Endpoint
	DownloadEndpoint goa.Endpoint
}

// NewClient initializes a "updown" service client given the endpoints.
func NewClient(upload, download goa.Endpoint) *Client {
	return &Client{
		UploadEndpoint:   upload,
		DownloadEndpoint: download,
	}
}

// Upload calls the "upload" endpoint of the "updown" service.
func (c *Client) Upload(ctx context.Context, p *UploadPayload, body io.ReadCloser) (res string, err error) {
	var ires interface{}
	ires, err = c.UploadEndpoint(ctx, &UploadRequestData{Payload: p, Body: body})
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Download calls the "download" endpoint of the "updown" service.
func (c *Client) Download(ctx context.Context, p string) (res *DownloadResult, body io.ReadCloser, err error) {
	var ires interface{}
	ires, err = c.DownloadEndpoint(ctx, p)
	if err != nil {
		return
	}
	o := ires.(*DownloadResponseData)
	return o.Result, o.Body, nil
}
