// Code generated by goa v3.0.10, DO NOT EDIT.
//
// updown endpoints
//
// Command:
// $ goa gen goa.design/examples/upload_download/design

package updown

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "updown" service endpoints.
type Endpoints struct {
	Upload   goa.Endpoint
	Download goa.Endpoint
}

// UploadEndpointInput is the input type of "upload" endpoint that holds the
// method payload and the server stream.
type UploadEndpointInput struct {
	// Payload is the method payload.
	Payload *UploadPayload
	// Stream is the server stream used by the "upload" method to send data.
	Stream UploadServerStream
}

// DownloadEndpointInput is the input type of "download" endpoint that holds
// the method payload and the server stream.
type DownloadEndpointInput struct {
	// Payload is the method payload.
	Payload string
	// Stream is the server stream used by the "download" method to send data.
	Stream DownloadServerStream
}

// NewEndpoints wraps the methods of the "updown" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Upload:   NewUploadEndpoint(s),
		Download: NewDownloadEndpoint(s),
	}
}

// Use applies the given middleware to all the "updown" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Upload = m(e.Upload)
	e.Download = m(e.Download)
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "upload" of service "updown".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*UploadEndpointInput)
		return nil, s.Upload(ctx, ep.Payload, ep.Stream)
	}
}

// NewDownloadEndpoint returns an endpoint function that calls the method
// "download" of service "updown".
func NewDownloadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		ep := req.(*DownloadEndpointInput)
		return nil, s.Download(ctx, ep.Payload, ep.Stream)
	}
}
