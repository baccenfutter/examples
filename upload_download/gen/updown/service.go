// Code generated by goa v3.0.10, DO NOT EDIT.
//
// updown service
//
// Command:
// $ goa gen goa.design/examples/upload_download/design

package updown

import (
	"context"
	"io"
)

// Service updown demonstrates how to implement upload and download of files in
// Goa without having to load the entire content in memory first.
// The upload method uses SkipRequestBodyEncodeDecode to delegate reading the
// HTTP
// request body to the service logic. This alleviates the need for loading the
// full body content in memory first to decode it into a data structure. Note
// that
// using SkipRequestBodyDecode is incompatible with gRPC and can only be used on
// methods that only define a HTTP transport mapping. This example
// implementation
// leverages package "mime/multipart" to read the request body.
// Similarly the download method uses SkipResponseBodyEncodeDecode to stream the
// file to the client without requiring to load the complete content in memory
// first. As with SkipRequestBodyDecode using SkipResponseBodyEncodeDecode is
// incompatible with gRPC.
type Service interface {
	// Upload implements upload.
	Upload(context.Context, *UploadPayload, io.ReadCloser) (res string, err error)
	// Download implements download.
	Download(context.Context, string) (res *DownloadResult, body io.ReadCloser, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "updown"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"upload", "download"}

// UploadPayload is the payload type of the updown service upload method.
type UploadPayload struct {
	// Length is the upload content length in bytes.
	Length uint
	// Name is the name of the file being uploaded
	Name string
}

// DownloadResult is the result type of the updown service download method.
type DownloadResult struct {
	// Length is the downloaded content length in bytes.
	Length uint
}
