// Code generated by goa v3.0.9, DO NOT EDIT.
//
// upload endpoints
//
// Command:
// $ goa gen goa.design/examples/upload/design

package upload

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "upload" service endpoints.
type Endpoints struct {
	Upload   goa.Endpoint
	Download goa.Endpoint
}

// NewEndpoints wraps the methods of the "upload" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Upload:   NewUploadEndpoint(s),
		Download: NewDownloadEndpoint(s),
	}
}

// Use applies the given middleware to all the "upload" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Upload = m(e.Upload)
	e.Download = m(e.Download)
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "upload" of service "upload".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.([]byte)
		return s.Upload(ctx, p)
	}
}

// NewDownloadEndpoint returns an endpoint function that calls the method
// "download" of service "upload".
func NewDownloadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		return s.Download(ctx, p)
	}
}
