// Code generated by goa v3.0.9, DO NOT EDIT.
//
// upload HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/upload/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	uploadc "goa.design/examples/upload/gen/http/upload/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `upload (upload|download)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` upload upload --p "UXVhZXJhdCBldmVuaWV0IHRvdGFtIGV0IGlsbG8gZXhwbGljYWJvIGlsbHVtLg=="` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	uploadUploadEncoderFn uploadc.UploadUploadEncoderFunc,
) (goa.Endpoint, interface{}, error) {
	var (
		uploadFlags = flag.NewFlagSet("upload", flag.ContinueOnError)

		uploadUploadFlags = flag.NewFlagSet("upload", flag.ExitOnError)
		uploadUploadPFlag = uploadUploadFlags.String("p", "REQUIRED", "[]byte is the payload type of the upload service upload method.")

		uploadDownloadFlags = flag.NewFlagSet("download", flag.ExitOnError)
		uploadDownloadPFlag = uploadDownloadFlags.String("p", "REQUIRED", "string is the payload type of the upload service download method.")
	)
	uploadFlags.Usage = uploadUsage
	uploadUploadFlags.Usage = uploadUploadUsage
	uploadDownloadFlags.Usage = uploadDownloadUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "upload":
			svcf = uploadFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "upload":
			switch epn {
			case "upload":
				epf = uploadUploadFlags

			case "download":
				epf = uploadDownloadFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "upload":
			c := uploadc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload":
				endpoint = c.Upload(uploadUploadEncoderFn)
				data = []byte(*uploadUploadPFlag)
			case "download":
				endpoint = c.Download()
				data = *uploadDownloadPFlag
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// uploadUsage displays the usage of the upload command and its subcommands.
func uploadUsage() {
	fmt.Fprintf(os.Stderr, `Service is the upload service interface.
Usage:
    %s [globalflags] upload COMMAND [flags]

COMMAND:
    upload: Upload implements upload.
    download: Download implements download.

Additional help:
    %s upload COMMAND --help
`, os.Args[0], os.Args[0])
}
func uploadUploadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload upload -p STRING

Upload implements upload.
    -p STRING: []byte is the payload type of the upload service upload method.

Example:
    `+os.Args[0]+` upload upload --p "UXVhZXJhdCBldmVuaWV0IHRvdGFtIGV0IGlsbG8gZXhwbGljYWJvIGlsbHVtLg=="
`, os.Args[0])
}

func uploadDownloadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] upload download -p STRING

Download implements download.
    -p STRING: string is the payload type of the upload service download method.

Example:
    `+os.Args[0]+` upload download --p "Hic quas quas consequuntur et natus dignissimos."
`, os.Args[0])
}
